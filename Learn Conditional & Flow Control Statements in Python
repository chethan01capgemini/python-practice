1. Conditional Statements
Conditional statements allow a program to execute certain code based on whether a condition is true or false. They are essential for decision-making in programming.
•	If Statement: Executes a block of code if a specified condition is true.
python
if condition:
    # code to execute if condition is true
•	Else Statement: Executes a block of code if the condition in the if statement is false.
python
if condition:
    # code if true
else:
    # code if false
•	Else If (Elif in Python): Checks another condition if the first if condition is false.
python
if condition1:
    # code if condition1 is true
elif condition2:
    # code if condition2 is true
else:
    # code if both conditions are false
•	Switch Statement: A more concise way to handle multiple conditions (used in languages like C, C++, Java).

switch (expression) {
    case value1:
        // code
        break;
    case value2:
        // code
        break;
    default:
        // code
}
2. Iterative Statements
Iterative statements allow for the execution of a block of code multiple times, based on a condition or a fixed number of iterations.
•	For Loop: Iterates over a sequence (like a list or range).

for i in range(5):  # Executes 5 times
    # code to execute
•	While Loop: Repeats a block of code as long as a condition is true.

while condition:
    # code to execute
•	Do While Loop: Similar to a while loop, but the code block is executed at least once before the condition is tested (used in languages like C, Java).

do {
    // code to execute
} while (condition);
3. Transfer Statements
Transfer statements change the flow of control in a program, allowing for jumps to different parts of code.
•	Break: Exits the nearest enclosing loop or switch statement.

for i in range(10):
    if i == 5:
        break  # Exits the loop
•	Continue: Skips the current iteration and proceeds to the next iteration of a loop.

for i in range(10):
    if i % 2 == 0:
        continue  # Skips even numbers
•	Return: Exits a function and optionally returns a value.

def my_function():
    return value  # Exits the function
•	Goto: A statement that transfers control to a labeled statement (not recommended in structured programming).
4. Flow Control and Conditional-Based Programs
Flow control refers to the order in which individual statements, instructions, or function calls are executed in a program. Conditional-based programming allows for different execution paths based on conditions.
•	Control Structures: Combinations of conditional statements and loops to manage the flow of a program.
•	Decision Trees: A visual representation of possible outcomes based on various conditions.
•	State Machines: A computational model that can be in exactly one of a finite number of states at any given time, changing states based on conditions.

